buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.web3j:web3j-gradle-plugin:4.9.2"
    }
}

subprojects {
    apply plugin: 'org.web3j'

    group 'com.iconloop.btp'

    java {
        sourceCompatibility = JavaVersion.VERSION_11
    }

    repositories {
        mavenLocal()
        mavenCentral()

        maven { url "https://hyperledger.jfrog.io/artifactory/besu-maven/" }
        maven { url "https://artifacts.consensys.net/public/maven/maven/" }
        maven { url "https://splunk.jfrog.io/splunk/ext-releases-local" }
        maven { url "https://dl.cloudsmith.io/public/consensys/quorum-mainnet-launcher/maven/" }
        maven { url "https://repo.spring.io/ui/native/libs-release/" }
    }

    dependencies {
        testImplementation("org.junit.jupiter:junit-jupiter-api:5.7.2")
        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.7.2")
        testImplementation("org.junit.jupiter:junit-jupiter-params:5.7.2")
    }

    sourceSets {
        main {
            java {
                srcDir "java"
            }
            solidity {
                srcDir "contracts"
                include "**/*.sol"
                exclude "**/test/*.sol"
//                output.resourcesDir = file('build/main/solidity')
            }
        }
        test {
            java {
                srcDir {
                    "test/java"
                }
            }
            resources {
                srcDir {
                    "test/resources"
                }
            }
            solidity {
                srcDir "contracts/test"
            }
        }
    }

    node {
        workDir = file("${rootProject.projectDir}/.gradle/nodejs")
        yarnWorkDir = file("${rootProject.projectDir}/.gradle/yarn")
        nodeProjectDir = project.projectDir
    }

    solidity {
        def nodeProjectDir = project.node.nodeProjectDir.asFile.get()
        def nodeModuleDir = projectDir.toPath().relativize(nodeProjectDir.toPath()).resolve("node_modules")
        resolvePackages = false
        def packageJsonFile = project.file("package.json")
        if (packageJsonFile.exists()) {
            def packageJson = new groovy.json.JsonSlurper().parseText(packageJsonFile.text)
            if (packageJson.dependencies != null) {
                pathRemappings = packageJson.dependencies.collectEntries {
                    k, v -> [k, nodeModuleDir.resolve(k).toString()]
                }
            }
        }
        pathRemappings.putAll([
                '../interfaces': 'interfaces',
                '../libraries' : 'libraries'
        ])
        allowPaths = pathRemappings.collect { k, v -> k }
        println "solidityPathRemappings:" + pathRemappings

        def tc = [
                source : "default",
            version : "0.8.2",
            evmVersion : "petersburg",
            optimize : true,
            optimizeRuns : 200
        ]
        def tcFile = project.file("truffle-config.js")
        if (tcFile.exists()) {
            def ne = com.github.gradle.node.NodeExtension.get(project)
            def vc = new com.github.gradle.node.variant.VariantComputer(com.github.gradle.node.util.PlatformHelper.INSTANCE)
            def nex = vc.computeNodeExec(ne, vc.computeNodeBinDir(vc.computeNodeDir(ne)))
            def sout = new ByteArrayOutputStream()
            def eout = new ByteArrayOutputStream()
            if (new File(nex.orNull).exists()) {
                exec {
                    standardOutput=sout
                    errorOutput=eout
                    executable = nex.orNull
                    args = ['-e','console.log(JSON.stringify(require("./truffle-config.js").compilers.solc))']
                    ignoreExitValue = true
                }
                if (sout.size() > 0) {
                    def tcJson = new groovy.json.JsonSlurper().parseText(sout.toString())
                    tc.source = "truffle-config.js"
                    tc.version = tcJson.version
                    tc.evmVersion = tcJson.settings.evmVersion
                    tc.optimize = tcJson.settings.optimizer.enabled
                    tc.optimizeRuns = tcJson.settings.optimizer.runs
                }
                if (eout.size() > 0) {
                    println eout
                }
            }
        }
        println "[$project.name] ${tc}"
        version = tc.version
        evmVersion = tc.evmVersion
        optimize = tc.optimize
        optimizeRuns = tc.optimizeRuns
    }

    task clearTestSolidity(type: Delete) {
        setDelete("${project.buildDir}/resources/test/solidity")
    }

    test {
        dependsOn clearTestSolidity

        useJUnitPlatform()

        testLogging {
            events "passed", "skipped", "failed"
            showStandardStreams = true
            systemProperties(System.getProperties())
            def props = project.getProperties()
            systemProperty 'url', props.getOrDefault("url", "http://localhost:8545")
            systemProperty 'privateKey', props.getOrDefault("privateKey", "0x8f2a55949038a9610f50fb23b5883af3b4ecb3c3bb792cbcefbd1542c692be63")
            systemProperty 'tester.privateKey', props.getOrDefault("tester.privateKey", "0xa6d23a0b704b649a92dd56bdff0f9874eeccc9746f10d78b683159af1617e08f")
        }
    }

}

