/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  RLPCodecMock,
  RLPCodecMockInterface,
} from "../../test/RLPCodecMock";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "bytesToRLP",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "v",
        type: "int256",
      },
    ],
    name: "intToBytes",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "v",
        type: "int256",
      },
    ],
    name: "intToRLP",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "rlp",
        type: "bytes",
      },
    ],
    name: "rlpToBytes",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "rlp",
        type: "bytes",
      },
    ],
    name: "rlpToInt",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "v",
        type: "uint256",
      },
    ],
    name: "uintToBytes",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610ba9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c806394e8767d1161005057806394e8767d146100c6578063dec51e31146100d9578063f7f8717c146100fa57600080fd5b806319df7ed5146100775780635935a4ae146100a05780637379230b146100b3575b600080fd5b61008a61008536600461085a565b61010d565b604051610097919061092f565b60405180910390f35b61008a6100ae366004610962565b610146565b61008a6100c1366004610962565b610151565b61008a6100d4366004610962565b61015c565b6100ec6100e736600461085a565b610167565b604051908152602001610097565b61008a61010836600461085a565b6101a2565b604080518082018252600080825260209182015281518083019092528251825280830190820152606090610140906101ad565b92915050565b60606101408261029b565b6060610140826102ae565b606061014082610365565b600061014061019d8360408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b6103fd565b6060610140826104ab565b80516060906102035760405162461bcd60e51b815260206004820152600e60248201527f496e76616c6964206c656e67746800000000000000000000000000000000000060448201526064015b60405180910390fd5b6000610212836020015161051a565b905060008184600001516102269190610991565b905060008167ffffffffffffffff81111561024357610243610844565b6040519080825280601f01601f19166020018201604052801561026d576020820181803683370190505b509050600081602001905061029284876020015161028b91906109a4565b828561059c565b50949350505050565b60606101406102a9836102ae565b6104ab565b6060816000036102ec5760015b6040519080825280601f01601f1916602001820160405280156102e5576020820181803683370190505b5092915050565b608060801960015b602081101561034057828512801561030b57508185135b156103235761031a858261061f565b95945050505050565b600892831b929190911b9080610338816109b7565b9150506102f4565b5060408051602081018690520160405160208183030381529060405292505050919050565b6060816000036103765760016102bb565b608060015b60208110156103b7578184101561039e57610396848261061f565b949350505050565b60089190911b90806103af816109b7565b91505061037b565b50808310156103e4576040805160208101859052015b604051602081830303815290604052915050919050565b60405160006020820152602181018490526041016103cd565b600081516021116104505760405162461bcd60e51b815260206004820152601260248201527f496e76616c696420696e74206e756d626572000000000000000000000000000060448201526064016101fa565b600061045f836020015161051a565b905060008184600001516104739190610991565b905060008083866020015161048891906109a4565b90508051915060208310156102925781836020036008021d915050949350505050565b606080825160011480156104d957506080836000815181106104cf576104cf6109d0565b016020015160f81c105b156104e5575081610140565b6104f183516080610696565b836040516020016105039291906109e6565b604051602081830303815290604052905092915050565b8051600090811a60808110156105335750600092915050565b60b881108061054e575060c0811080159061054e575060f881105b1561055c5750600192915050565b60c081101561059057610571600160b8610a15565b61057e9060ff1682610991565b6105899060016109a4565b9392505050565b610571600160f8610a15565b806000036105a957505050565b602081106105e157825182526105c06020846109a4565b92506105cd6020836109a4565b91506105da602082610991565b90506105a9565b801561061a57600060016105f6836020610991565b61060290610100610b12565b61060c9190610991565b845184518216911916178352505b505050565b606060008267ffffffffffffffff81111561063c5761063c610844565b6040519080825280601f01601f191660200182016040528015610666576020820181803683370190505b50905060208101836020035b602081101561068c5785811a825360019182019101610672565b5090949350505050565b606080603884101561070057604080516001808252818301909252906020820181803683370190505090506106cb83856109a4565b601f1a60f81b816000815181106106e4576106e46109d0565b60200101906001600160f81b031916908160001a905350610589565b600060015b61070f8187610b34565b15610735578161071e816109b7565b925061072e905061010082610b48565b9050610705565b6107408260016109a4565b67ffffffffffffffff81111561075857610758610844565b6040519080825280601f01601f191660200182016040528015610782576020820181803683370190505b50925061078f85836109a4565b61079a9060376109a4565b601f1a60f81b836000815181106107b3576107b36109d0565b60200101906001600160f81b031916908160001a905350600190505b81811161068c576101006107e38284610991565b6107ef90610100610b12565b6107f99088610b34565b6108039190610b5f565b601f1a60f81b83828151811061081b5761081b6109d0565b60200101906001600160f81b031916908160001a9053508061083c816109b7565b9150506107cf565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561086c57600080fd5b813567ffffffffffffffff8082111561088457600080fd5b818401915084601f83011261089857600080fd5b8135818111156108aa576108aa610844565b604051601f8201601f19908116603f011681019083821181831017156108d2576108d2610844565b816040528281528760208487010111156108eb57600080fd5b826020860160208301376000928101602001929092525095945050505050565b60005b8381101561092657818101518382015260200161090e565b50506000910152565b602081526000825180602084015261094e81604085016020870161090b565b601f01601f19169190910160400192915050565b60006020828403121561097457600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156101405761014061097b565b808201808211156101405761014061097b565b6000600182016109c9576109c961097b565b5060010190565b634e487b7160e01b600052603260045260246000fd5b600083516109f881846020880161090b565b835190830190610a0c81836020880161090b565b01949350505050565b60ff82811682821603908111156101405761014061097b565b600181815b80851115610a69578160001904821115610a4f57610a4f61097b565b80851615610a5c57918102915b93841c9390800290610a33565b509250929050565b600082610a8057506001610140565b81610a8d57506000610140565b8160018114610aa35760028114610aad57610ac9565b6001915050610140565b60ff841115610abe57610abe61097b565b50506001821b610140565b5060208310610133831016604e8410600b8410161715610aec575081810a610140565b610af68383610a2e565b8060001904821115610b0a57610b0a61097b565b029392505050565b60006105898383610a71565b634e487b7160e01b600052601260045260246000fd5b600082610b4357610b43610b1e565b500490565b80820281158282048414176101405761014061097b565b600082610b6e57610b6e610b1e565b50069056fea2646970667358221220a45dacbea6959dcd5c9d6bc31a4841db79be43315b0fc52cc2297c849a2d15d964736f6c63430008110033";

type RLPCodecMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RLPCodecMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RLPCodecMock__factory extends ContractFactory {
  constructor(...args: RLPCodecMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RLPCodecMock> {
    return super.deploy(overrides || {}) as Promise<RLPCodecMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): RLPCodecMock {
    return super.attach(address) as RLPCodecMock;
  }
  override connect(signer: Signer): RLPCodecMock__factory {
    return super.connect(signer) as RLPCodecMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RLPCodecMockInterface {
    return new utils.Interface(_abi) as RLPCodecMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RLPCodecMock {
    return new Contract(address, _abi, signerOrProvider) as RLPCodecMock;
  }
}
